<% if controller_name != 'permalink' %>
<%= link_to 'Back', layers_path %> |
<%= link_to  @permalink, @permalink %>
<% end %>
<ul class="breadcrumb">
  <!--<li class="active" data-level='0'>Level 0</li> -->
</ul>


<div id="spinner"></div>

<div id="map"></div>

<script type="text/javascript">
$(document).ready(function(){

  app.loading = new app.Loading();

  var dataJson = <%= raw @data_json %>;

  //var rows = dataJson['rows'][1];

  var pointsTableName = dataJson['points_table_name'];

  //var latStr = dataJson['rows'][0].at(-2);
  //var lonStr = dataJson['rows'][0].at(-1);

  var viewPoint = dataJson['view_point'];

  var pointsCountOfAreas = dataJson['points_counts_array'];

  var borderAreas = dataJson['area_points'];
  var countOfAreas = dataJson['points_count'];

  //var colNames = dataJson['rows'][0].to(-2);
  var filters = dataJson['filters'];

  var pointsWithIndex = dataJson['points_with_index'];

  // map
  app.map.createLMap('map', viewPoint, 5);

  // color grades based on counts of areas
  var grades = app.style.getColorGrade(pointsCountOfAreas);

  var breadcrumb = new app.Breadcrumb;
  var areaSet = new app.AreaSet;
  var pointSet = new app.PointSet;
  var legend = new app.Legend({grades: grades, style: app.style, areaSet: areaSet, percent: false, showWay: 'magnitude'});
  // legend
  var legendView = new app.LegendView({model: legend, map: app.map.get('lMap')});

  // Filter Panel
  filterPanel = new app.FilterPanel({col: 'None', attrAndCounts: [], pointSet: pointSet, areaSet: areaSet, pointsTableName: pointsTableName});
  filterPanelView = new app.FilterPanelView({model: filterPanel, map: app.map.get('lMap')});
  filterPanel.set('view', filterPanelView);


  // Breadcrumb
  breadcrumb.areaSet = areaSet;
  breadcrumb.pointSet = pointSet;
  breadcrumb.filterPanelView = filterPanelView;

  // Areas Set
  areaSet.lLayerGroup = new L.LayerGroup();
  areaSet.layerId = dataJson['layer_id'];
  areaSet.pointsTableName = pointsTableName;
  areaSet.breadcrumb = breadcrumb;
  areaSet.pointSet = pointSet;
  areaSet.legend = legend;
  areaSet.filterPanelView = filterPanelView;
  areaSet.listenTo(legendView, 'showWayChange', areaSet.legendShowChange);

  //create each area and add to the set.
  for(var k in borderAreas) {
    if(borderAreas.hasOwnProperty(k)) {
      var border = borderAreas[k];
      var count = countOfAreas[k];
      var area = new app.Area({border: border, count: count, totalCount: count, areaId: parseInt(k, 10), pointSet: pointSet, areaSet: areaSet, clicked: false, canShowPoints: false, canExpandChild: true, showWay: 'magnitude'}, {grades: grades});
      areaSet.add(area);
      area.get('lArea').addTo(areaSet.lLayerGroup);
    }
  }

  // Points Set
  //pointSet.pointsTable = rows;
  pointSet.colNames = filters;
  pointSet.lLayerGroup = new L.FeatureGroup();
  pointSet.pointsTableName = pointsTableName;

  //allAttrs = {};

  // create point and addTo point set
  for(var i=0;i < pointsWithIndex.length;i++) {
    var lat = pointsWithIndex[i]['lat'];
    var lon = pointsWithIndex[i]['lon'];
    //if(lat.match(/\d+\.\d+/) && lon.match(/\d+\.\d+/)) {
      var colValues = {}
      //_.each(colNames, function(col) {
      //  colValues[col] = rows[i][col];
      //  allAttrs[col] = allAttrs[col] || [];
      //  allAttrs[col].push(rows[i][col]);
      //});
      var point = new app.Point({lat: lat, lon: lon, pointSet: pointSet, colValues: colValues, isOnMap: false, isExisted: false, isSelected: false, tableIndex: pointsWithIndex[i]['index'], tableName: pointsTableName}, {});
      pointSet.add(point);
      //point.addTo(pointSet.lLayerGroup);
    //}
  }

  // generate colors for all attributes of points
  pointSet.generateAttrColors();//allAttrs);

  // each colsFeatureGroup has no points in the leaflet layer
  // but when it is switched, the points will change the styles
  var colsFeatureGroup = {};
  _.each(_.union(['None'], filters), function(col){
    var colLayer = new app.Layer({name: col, lLayer: new L.FeatureGroup, pointSet: pointSet, filterPanelView: filterPanelView, filterPanel: filterPanel});
    colsFeatureGroup[col] = colLayer.get('lLayer');
    colLayer.bindOnAdd();
  });

  breadcrumb.colsFeatureGroup = colsFeatureGroup;

  // whole layer
  var layer = new app.Layer;
  layer.init(app.map.get('lMap'), grades, {"baseLayers": colsFeatureGroup, "overlayLayers": {"Polygon Layer": areaSet.lLayerGroup, "Points Layer": pointSet.lLayerGroup}});

  legendView.render();

});
</script>
